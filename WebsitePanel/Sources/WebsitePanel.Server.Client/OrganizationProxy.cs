// Copyright (c) 2012, Outercurve Foundation.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// - Redistributions of source code must  retain  the  above copyright notice, this
//   list of conditions and the following disclaimer.
//
// - Redistributions in binary form  must  reproduce the  above  copyright  notice,
//   this list of conditions  and  the  following  disclaimer in  the documentation
//   and/or other materials provided with the distribution.
//
// - Neither  the  name  of  the  Outercurve Foundation  nor   the   names  of  its
//   contributors may be used to endorse or  promote  products  derived  from  this
//   software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT  NOT  LIMITED TO, THE IMPLIED
// WARRANTIES  OF  MERCHANTABILITY   AND  FITNESS  FOR  A  PARTICULAR  PURPOSE  ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
// ANY DIRECT, INDIRECT, INCIDENTAL,  SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT  OF  SUBSTITUTE  GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER  CAUSED AND ON
// ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT  LIABILITY,  OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING  IN  ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.6400
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.3038.
// 
namespace WebsitePanel.Providers.HostedSolution
{
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;

    using WebsitePanel.Providers.Common;
    using WebsitePanel.Providers.ResultObjects;



    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "OrganizationsSoap", Namespace = "http://tempuri.org/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ResultObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceProviderItem))]
    public partial class Organizations : Microsoft.Web.Services3.WebServicesClientProtocol
    {

        public ServiceProviderSettingsSoapHeader ServiceProviderSettingsSoapHeaderValue;

        private System.Threading.SendOrPostCallback OrganizationExistsOperationCompleted;

        private System.Threading.SendOrPostCallback CreateOrganizationOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteOrganizationOperationCompleted;

        private System.Threading.SendOrPostCallback CreateUserOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteUserOperationCompleted;

        private System.Threading.SendOrPostCallback GetUserGeneralSettingsOperationCompleted;

        private System.Threading.SendOrPostCallback CreateSecurityGroupOperationCompleted;

        private System.Threading.SendOrPostCallback GetSecurityGroupGeneralSettingsOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteSecurityGroupOperationCompleted;

        private System.Threading.SendOrPostCallback SetSecurityGroupGeneralSettingsOperationCompleted;

        private System.Threading.SendOrPostCallback AddObjectToSecurityGroupOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteObjectFromSecurityGroupOperationCompleted;

        private System.Threading.SendOrPostCallback SetUserGeneralSettingsOperationCompleted;

        private System.Threading.SendOrPostCallback SetUserPasswordOperationCompleted;

        private System.Threading.SendOrPostCallback SetUserPrincipalNameOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteOrganizationDomainOperationCompleted;

        private System.Threading.SendOrPostCallback CreateOrganizationDomainOperationCompleted;

        private System.Threading.SendOrPostCallback GetPasswordPolicyOperationCompleted;

        private System.Threading.SendOrPostCallback GetSamAccountNameByUserPrincipalNameOperationCompleted;

        private System.Threading.SendOrPostCallback DoesSamAccountNameExistOperationCompleted;

        /// <remarks/>
        public Organizations()
        {
            this.Url = "http://localhost:9003/Organizations.asmx";
        }

        /// <remarks/>
        public event OrganizationExistsCompletedEventHandler OrganizationExistsCompleted;

        /// <remarks/>
        public event CreateOrganizationCompletedEventHandler CreateOrganizationCompleted;

        /// <remarks/>
        public event DeleteOrganizationCompletedEventHandler DeleteOrganizationCompleted;

        /// <remarks/>
        public event CreateUserCompletedEventHandler CreateUserCompleted;

        /// <remarks/>
        public event DeleteUserCompletedEventHandler DeleteUserCompleted;

        /// <remarks/>
        public event GetUserGeneralSettingsCompletedEventHandler GetUserGeneralSettingsCompleted;

        /// <remarks/>
        public event CreateSecurityGroupCompletedEventHandler CreateSecurityGroupCompleted;

        /// <remarks/>
        public event GetSecurityGroupGeneralSettingsCompletedEventHandler GetSecurityGroupGeneralSettingsCompleted;

        /// <remarks/>
        public event DeleteSecurityGroupCompletedEventHandler DeleteSecurityGroupCompleted;

        /// <remarks/>
        public event SetSecurityGroupGeneralSettingsCompletedEventHandler SetSecurityGroupGeneralSettingsCompleted;

        /// <remarks/>
        public event AddObjectToSecurityGroupCompletedEventHandler AddObjectToSecurityGroupCompleted;

        /// <remarks/>
        public event DeleteObjectFromSecurityGroupCompletedEventHandler DeleteObjectFromSecurityGroupCompleted;

        /// <remarks/>
        public event SetUserGeneralSettingsCompletedEventHandler SetUserGeneralSettingsCompleted;

        /// <remarks/>
        public event SetUserPasswordCompletedEventHandler SetUserPasswordCompleted;

        /// <remarks/>
        public event SetUserPrincipalNameCompletedEventHandler SetUserPrincipalNameCompleted;

        /// <remarks/>
        public event DeleteOrganizationDomainCompletedEventHandler DeleteOrganizationDomainCompleted;

        /// <remarks/>
        public event CreateOrganizationDomainCompletedEventHandler CreateOrganizationDomainCompleted;

        /// <remarks/>
        public event GetPasswordPolicyCompletedEventHandler GetPasswordPolicyCompleted;

        /// <remarks/>
        public event GetSamAccountNameByUserPrincipalNameCompletedEventHandler GetSamAccountNameByUserPrincipalNameCompleted;

        /// <remarks/>
        public event DoesSamAccountNameExistCompletedEventHandler DoesSamAccountNameExistCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/OrganizationExists", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool OrganizationExists(string organizationId)
        {
            object[] results = this.Invoke("OrganizationExists", new object[] {
                        organizationId});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginOrganizationExists(string organizationId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("OrganizationExists", new object[] {
                        organizationId}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndOrganizationExists(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void OrganizationExistsAsync(string organizationId)
        {
            this.OrganizationExistsAsync(organizationId, null);
        }

        /// <remarks/>
        public void OrganizationExistsAsync(string organizationId, object userState)
        {
            if ((this.OrganizationExistsOperationCompleted == null))
            {
                this.OrganizationExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOrganizationExistsOperationCompleted);
            }
            this.InvokeAsync("OrganizationExists", new object[] {
                        organizationId}, this.OrganizationExistsOperationCompleted, userState);
        }

        private void OnOrganizationExistsOperationCompleted(object arg)
        {
            if ((this.OrganizationExistsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OrganizationExistsCompleted(this, new OrganizationExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateOrganization", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Organization CreateOrganization(string organizationId, bool enableDefaultGroup)
        {
            object[] results = this.Invoke("CreateOrganization", new object[] {
                        organizationId,
                        enableDefaultGroup});
            return ((Organization)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateOrganization(string organizationId, bool enableDefaultGroup, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CreateOrganization", new object[] {
                        organizationId,
                        enableDefaultGroup}, callback, asyncState);
        }

        /// <remarks/>
        public Organization EndCreateOrganization(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((Organization)(results[0]));
        }

        /// <remarks/>
        public void CreateOrganizationAsync(string organizationId, bool enableDefaultGroup)
        {
            this.CreateOrganizationAsync(organizationId, enableDefaultGroup, null);
        }

        /// <remarks/>
        public void CreateOrganizationAsync(string organizationId, bool enableDefaultGroup, object userState)
        {
            if ((this.CreateOrganizationOperationCompleted == null))
            {
                this.CreateOrganizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOrganizationOperationCompleted);
            }
            this.InvokeAsync("CreateOrganization", new object[] {
                        organizationId,
                        enableDefaultGroup}, this.CreateOrganizationOperationCompleted, userState);
        }

        private void OnCreateOrganizationOperationCompleted(object arg)
        {
            if ((this.CreateOrganizationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateOrganizationCompleted(this, new CreateOrganizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteOrganization", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteOrganization(string organizationId)
        {
            this.Invoke("DeleteOrganization", new object[] {
                        organizationId});
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteOrganization(string organizationId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteOrganization", new object[] {
                        organizationId}, callback, asyncState);
        }

        /// <remarks/>
        public void EndDeleteOrganization(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DeleteOrganizationAsync(string organizationId)
        {
            this.DeleteOrganizationAsync(organizationId, null);
        }

        /// <remarks/>
        public void DeleteOrganizationAsync(string organizationId, object userState)
        {
            if ((this.DeleteOrganizationOperationCompleted == null))
            {
                this.DeleteOrganizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOrganizationOperationCompleted);
            }
            this.InvokeAsync("DeleteOrganization", new object[] {
                        organizationId}, this.DeleteOrganizationOperationCompleted, userState);
        }

        private void OnDeleteOrganizationOperationCompleted(object arg)
        {
            if ((this.DeleteOrganizationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteOrganizationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateUser", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateUser(string organizationId, string loginName, string displayName, string upn, string password, bool enabled, bool enableDefaultGroup)
        {
            object[] results = this.Invoke("CreateUser", new object[] {
                        organizationId,
                        loginName,
                        displayName,
                        upn,
                        password,
                        enabled,
                        enableDefaultGroup});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateUser(string organizationId, string loginName, string displayName, string upn, string password, bool enabled, bool enableDefaultGroup, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CreateUser", new object[] {
                        organizationId,
                        loginName,
                        displayName,
                        upn,
                        password,
                        enabled,
                        enableDefaultGroup}, callback, asyncState);
        }

        /// <remarks/>
        public int EndCreateUser(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void CreateUserAsync(string organizationId, string loginName, string displayName, string upn, string password, bool enabled, bool enableDefaultGroup)
        {
            this.CreateUserAsync(organizationId, loginName, displayName, upn, password, enabled, enableDefaultGroup, null);
        }

        /// <remarks/>
        public void CreateUserAsync(string organizationId, string loginName, string displayName, string upn, string password, bool enabled, bool enableDefaultGroup, object userState)
        {
            if ((this.CreateUserOperationCompleted == null))
            {
                this.CreateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateUserOperationCompleted);
            }
            this.InvokeAsync("CreateUser", new object[] {
                        organizationId,
                        loginName,
                        displayName,
                        upn,
                        password,
                        enabled,
                        enableDefaultGroup}, this.CreateUserOperationCompleted, userState);
        }

        private void OnCreateUserOperationCompleted(object arg)
        {
            if ((this.CreateUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateUserCompleted(this, new CreateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteUser", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteUser(string loginName, string organizationId)
        {
            this.Invoke("DeleteUser", new object[] {
                        loginName,
                        organizationId});
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteUser(string loginName, string organizationId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteUser", new object[] {
                        loginName,
                        organizationId}, callback, asyncState);
        }

        /// <remarks/>
        public void EndDeleteUser(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DeleteUserAsync(string loginName, string organizationId)
        {
            this.DeleteUserAsync(loginName, organizationId, null);
        }

        /// <remarks/>
        public void DeleteUserAsync(string loginName, string organizationId, object userState)
        {
            if ((this.DeleteUserOperationCompleted == null))
            {
                this.DeleteUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteUserOperationCompleted);
            }
            this.InvokeAsync("DeleteUser", new object[] {
                        loginName,
                        organizationId}, this.DeleteUserOperationCompleted, userState);
        }

        private void OnDeleteUserOperationCompleted(object arg)
        {
            if ((this.DeleteUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserGeneralSettings", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public OrganizationUser GetUserGeneralSettings(string loginName, string organizationId)
        {
            object[] results = this.Invoke("GetUserGeneralSettings", new object[] {
                        loginName,
                        organizationId});
            return ((OrganizationUser)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetUserGeneralSettings(string loginName, string organizationId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetUserGeneralSettings", new object[] {
                        loginName,
                        organizationId}, callback, asyncState);
        }

        /// <remarks/>
        public OrganizationUser EndGetUserGeneralSettings(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((OrganizationUser)(results[0]));
        }

        /// <remarks/>
        public void GetUserGeneralSettingsAsync(string loginName, string organizationId)
        {
            this.GetUserGeneralSettingsAsync(loginName, organizationId, null);
        }

        /// <remarks/>
        public void GetUserGeneralSettingsAsync(string loginName, string organizationId, object userState)
        {
            if ((this.GetUserGeneralSettingsOperationCompleted == null))
            {
                this.GetUserGeneralSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserGeneralSettingsOperationCompleted);
            }
            this.InvokeAsync("GetUserGeneralSettings", new object[] {
                        loginName,
                        organizationId}, this.GetUserGeneralSettingsOperationCompleted, userState);
        }

        private void OnGetUserGeneralSettingsOperationCompleted(object arg)
        {
            if ((this.GetUserGeneralSettingsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserGeneralSettingsCompleted(this, new GetUserGeneralSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateSecurityGroup", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateSecurityGroup(string organizationId, string groupName)
        {
            object[] results = this.Invoke("CreateSecurityGroup", new object[] {
                    organizationId,
                    groupName});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateSecurityGroup(string organizationId, string groupName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CreateSecurityGroup", new object[] {
                    organizationId,
                    groupName}, callback, asyncState);
        }

        /// <remarks/>
        public int EndCreateSecurityGroup(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void CreateSecurityGroupAsync(string organizationId, string groupName)
        {
            this.CreateSecurityGroupAsync(organizationId, groupName, null);
        }

        /// <remarks/>
        public void CreateSecurityGroupAsync(string organizationId, string groupName, object userState)
        {
            if ((this.CreateSecurityGroupOperationCompleted == null))
            {
                this.CreateSecurityGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSecurityGroupOperationCompleted);
            }
            this.InvokeAsync("CreateSecurityGroup", new object[] {
                    organizationId,
                    groupName}, this.CreateSecurityGroupOperationCompleted, userState);
        }

        private void OnCreateSecurityGroupOperationCompleted(object arg)
        {
            if ((this.CreateSecurityGroupCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSecurityGroupCompleted(this, new CreateSecurityGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSecurityGroupGeneralSettings", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public OrganizationSecurityGroup GetSecurityGroupGeneralSettings(string groupName, string organizationId)
        {
            object[] results = this.Invoke("GetSecurityGroupGeneralSettings", new object[] {
                    groupName,
                    organizationId});
            return ((OrganizationSecurityGroup)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSecurityGroupGeneralSettings(string groupName, string organizationId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSecurityGroupGeneralSettings", new object[] {
                    groupName,
                    organizationId}, callback, asyncState);
        }

        /// <remarks/>
        public OrganizationSecurityGroup EndGetSecurityGroupGeneralSettings(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((OrganizationSecurityGroup)(results[0]));
        }

        /// <remarks/>
        public void GetSecurityGroupGeneralSettingsAsync(string groupName, string organizationId)
        {
            this.GetSecurityGroupGeneralSettingsAsync(groupName, organizationId, null);
        }

        /// <remarks/>
        public void GetSecurityGroupGeneralSettingsAsync(string groupName, string organizationId, object userState)
        {
            if ((this.GetSecurityGroupGeneralSettingsOperationCompleted == null))
            {
                this.GetSecurityGroupGeneralSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSecurityGroupGeneralSettingsOperationCompleted);
            }
            this.InvokeAsync("GetSecurityGroupGeneralSettings", new object[] {
                    groupName,
                    organizationId}, this.GetSecurityGroupGeneralSettingsOperationCompleted, userState);
        }

        private void OnGetSecurityGroupGeneralSettingsOperationCompleted(object arg)
        {
            if ((this.GetSecurityGroupGeneralSettingsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSecurityGroupGeneralSettingsCompleted(this, new GetSecurityGroupGeneralSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteSecurityGroup", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteSecurityGroup(string groupName, string organizationId)
        {
            this.Invoke("DeleteSecurityGroup", new object[] {
                    groupName,
                    organizationId});
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteSecurityGroup(string groupName, string organizationId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteSecurityGroup", new object[] {
                    groupName,
                    organizationId}, callback, asyncState);
        }

        /// <remarks/>
        public void EndDeleteSecurityGroup(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DeleteSecurityGroupAsync(string groupName, string organizationId)
        {
            this.DeleteSecurityGroupAsync(groupName, organizationId, null);
        }

        /// <remarks/>
        public void DeleteSecurityGroupAsync(string groupName, string organizationId, object userState)
        {
            if ((this.DeleteSecurityGroupOperationCompleted == null))
            {
                this.DeleteSecurityGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSecurityGroupOperationCompleted);
            }
            this.InvokeAsync("DeleteSecurityGroup", new object[] {
                    groupName,
                    organizationId}, this.DeleteSecurityGroupOperationCompleted, userState);
        }

        private void OnDeleteSecurityGroupOperationCompleted(object arg)
        {
            if ((this.DeleteSecurityGroupCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSecurityGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetSecurityGroupGeneralSettings", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetSecurityGroupGeneralSettings(string organizationId, string groupName, string[] memberAccounts, string notes)
        {
            this.Invoke("SetSecurityGroupGeneralSettings", new object[] {
                    organizationId,
                    groupName,
                    memberAccounts,
                    notes});
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetSecurityGroupGeneralSettings(string organizationId, string groupName, string[] memberAccounts, string notes, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SetSecurityGroupGeneralSettings", new object[] {
                    organizationId,
                    groupName,
                    memberAccounts,
                    notes}, callback, asyncState);
        }

        /// <remarks/>
        public void EndSetSecurityGroupGeneralSettings(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SetSecurityGroupGeneralSettingsAsync(string organizationId, string groupName, string[] memberAccounts, string notes)
        {
            this.SetSecurityGroupGeneralSettingsAsync(organizationId, groupName, memberAccounts, notes, null);
        }

        /// <remarks/>
        public void SetSecurityGroupGeneralSettingsAsync(string organizationId, string groupName, string[] memberAccounts, string notes, object userState)
        {
            if ((this.SetSecurityGroupGeneralSettingsOperationCompleted == null))
            {
                this.SetSecurityGroupGeneralSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSecurityGroupGeneralSettingsOperationCompleted);
            }
            this.InvokeAsync("SetSecurityGroupGeneralSettings", new object[] {
                    organizationId,
                    groupName,
                    memberAccounts,
                    notes}, this.SetSecurityGroupGeneralSettingsOperationCompleted, userState);
        }

        private void OnSetSecurityGroupGeneralSettingsOperationCompleted(object arg)
        {
            if ((this.SetSecurityGroupGeneralSettingsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSecurityGroupGeneralSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddObjectToSecurityGroup", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddObjectToSecurityGroup(string organizationId, string accountName, string groupName)
        {
            this.Invoke("AddObjectToSecurityGroup", new object[] {
                    organizationId,
                    accountName,
                    groupName});
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddObjectToSecurityGroup(string organizationId, string accountName, string groupName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddObjectToSecurityGroup", new object[] {
                    organizationId,
                    accountName,
                    groupName}, callback, asyncState);
        }

        /// <remarks/>
        public void EndAddObjectToSecurityGroup(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void AddObjectToSecurityGroupAsync(string organizationId, string accountName, string groupName)
        {
            this.AddObjectToSecurityGroupAsync(organizationId, accountName, groupName, null);
        }

        /// <remarks/>
        public void AddObjectToSecurityGroupAsync(string organizationId, string accountName, string groupName, object userState)
        {
            if ((this.AddObjectToSecurityGroupOperationCompleted == null))
            {
                this.AddObjectToSecurityGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddObjectToSecurityGroupOperationCompleted);
            }
            this.InvokeAsync("AddObjectToSecurityGroup", new object[] {
                    organizationId,
                    accountName,
                    groupName}, this.AddObjectToSecurityGroupOperationCompleted, userState);
        }

        private void OnAddObjectToSecurityGroupOperationCompleted(object arg)
        {
            if ((this.AddObjectToSecurityGroupCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddObjectToSecurityGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteObjectFromSecurityGroup", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteObjectFromSecurityGroup(string organizationId, string accountName, string groupName)
        {
            this.Invoke("DeleteObjectFromSecurityGroup", new object[] {
                    organizationId,
                    accountName,
                    groupName});
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteObjectFromSecurityGroup(string organizationId, string accountName, string groupName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteObjectFromSecurityGroup", new object[] {
                    organizationId,
                    accountName,
                    groupName}, callback, asyncState);
        }

        /// <remarks/>
        public void EndDeleteObjectFromSecurityGroup(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DeleteObjectFromSecurityGroupAsync(string organizationId, string accountName, string groupName)
        {
            this.DeleteObjectFromSecurityGroupAsync(organizationId, accountName, groupName, null);
        }

        /// <remarks/>
        public void DeleteObjectFromSecurityGroupAsync(string organizationId, string accountName, string groupName, object userState)
        {
            if ((this.DeleteObjectFromSecurityGroupOperationCompleted == null))
            {
                this.DeleteObjectFromSecurityGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteObjectFromSecurityGroupOperationCompleted);
            }
            this.InvokeAsync("DeleteObjectFromSecurityGroup", new object[] {
                    organizationId,
                    accountName,
                    groupName}, this.DeleteObjectFromSecurityGroupOperationCompleted, userState);
        }

        private void OnDeleteObjectFromSecurityGroupOperationCompleted(object arg)
        {
            if ((this.DeleteObjectFromSecurityGroupCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteObjectFromSecurityGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetUserGeneralSettings", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetUserGeneralSettings(
                    string organizationId,
                    string accountName,
                    string displayName,
                    string password,
                    bool hideFromAddressBook,
                    bool disabled,
                    bool locked,
                    string firstName,
                    string initials,
                    string lastName,
                    string address,
                    string city,
                    string state,
                    string zip,
                    string country,
                    string jobTitle,
                    string company,
                    string department,
                    string office,
                    string managerAccountName,
                    string businessPhone,
                    string fax,
                    string homePhone,
                    string mobilePhone,
                    string pager,
                    string webPage,
                    string notes,
                    string externalEmail)
        {
            this.Invoke("SetUserGeneralSettings", new object[] {
                        organizationId,
                        accountName,
                        displayName,
                        password,
                        hideFromAddressBook,
                        disabled,
                        locked,
                        firstName,
                        initials,
                        lastName,
                        address,
                        city,
                        state,
                        zip,
                        country,
                        jobTitle,
                        company,
                        department,
                        office,
                        managerAccountName,
                        businessPhone,
                        fax,
                        homePhone,
                        mobilePhone,
                        pager,
                        webPage,
                        notes,
                        externalEmail});
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetUserGeneralSettings(
                    string organizationId,
                    string accountName,
                    string displayName,
                    string password,
                    bool hideFromAddressBook,
                    bool disabled,
                    bool locked,
                    string firstName,
                    string initials,
                    string lastName,
                    string address,
                    string city,
                    string state,
                    string zip,
                    string country,
                    string jobTitle,
                    string company,
                    string department,
                    string office,
                    string managerAccountName,
                    string businessPhone,
                    string fax,
                    string homePhone,
                    string mobilePhone,
                    string pager,
                    string webPage,
                    string notes,
                    string externalEmail,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("SetUserGeneralSettings", new object[] {
                        organizationId,
                        accountName,
                        displayName,
                        password,
                        hideFromAddressBook,
                        disabled,
                        locked,
                        firstName,
                        initials,
                        lastName,
                        address,
                        city,
                        state,
                        zip,
                        country,
                        jobTitle,
                        company,
                        department,
                        office,
                        managerAccountName,
                        businessPhone,
                        fax,
                        homePhone,
                        mobilePhone,
                        pager,
                        webPage,
                        notes,
                        externalEmail}, callback, asyncState);
        }

        /// <remarks/>
        public void EndSetUserGeneralSettings(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SetUserGeneralSettingsAsync(
                    string organizationId,
                    string accountName,
                    string displayName,
                    string password,
                    bool hideFromAddressBook,
                    bool disabled,
                    bool locked,
                    string firstName,
                    string initials,
                    string lastName,
                    string address,
                    string city,
                    string state,
                    string zip,
                    string country,
                    string jobTitle,
                    string company,
                    string department,
                    string office,
                    string managerAccountName,
                    string businessPhone,
                    string fax,
                    string homePhone,
                    string mobilePhone,
                    string pager,
                    string webPage,
                    string notes,
                    string externalEmail)
        {
            this.SetUserGeneralSettingsAsync(organizationId, accountName, displayName, password, hideFromAddressBook, disabled, locked, firstName, initials, lastName, address, city, state, zip, country, jobTitle, company, department, office, managerAccountName, businessPhone, fax, homePhone, mobilePhone, pager, webPage, notes, externalEmail, null);
        }

        /// <remarks/>
        public void SetUserGeneralSettingsAsync(
                    string organizationId,
                    string accountName,
                    string displayName,
                    string password,
                    bool hideFromAddressBook,
                    bool disabled,
                    bool locked,
                    string firstName,
                    string initials,
                    string lastName,
                    string address,
                    string city,
                    string state,
                    string zip,
                    string country,
                    string jobTitle,
                    string company,
                    string department,
                    string office,
                    string managerAccountName,
                    string businessPhone,
                    string fax,
                    string homePhone,
                    string mobilePhone,
                    string pager,
                    string webPage,
                    string notes,
                    string externalEmail,
                    object userState)
        {
            if ((this.SetUserGeneralSettingsOperationCompleted == null))
            {
                this.SetUserGeneralSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserGeneralSettingsOperationCompleted);
            }
            this.InvokeAsync("SetUserGeneralSettings", new object[] {
                        organizationId,
                        accountName,
                        displayName,
                        password,
                        hideFromAddressBook,
                        disabled,
                        locked,
                        firstName,
                        initials,
                        lastName,
                        address,
                        city,
                        state,
                        zip,
                        country,
                        jobTitle,
                        company,
                        department,
                        office,
                        managerAccountName,
                        businessPhone,
                        fax,
                        homePhone,
                        mobilePhone,
                        pager,
                        webPage,
                        notes,
                        externalEmail}, this.SetUserGeneralSettingsOperationCompleted, userState);
        }

        private void OnSetUserGeneralSettingsOperationCompleted(object arg)
        {
            if ((this.SetUserGeneralSettingsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserGeneralSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetUserPassword", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetUserPassword(string organizationId, string accountName, string password)
        {
            this.Invoke("SetUserPassword", new object[] {
                        organizationId,
                        accountName,
                        password});
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetUserPassword(string organizationId, string accountName, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SetUserPassword", new object[] {
                        organizationId,
                        accountName,
                        password}, callback, asyncState);
        }

        /// <remarks/>
        public void EndSetUserPassword(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SetUserPasswordAsync(string organizationId, string accountName, string password)
        {
            this.SetUserPasswordAsync(organizationId, accountName, password, null);
        }

        /// <remarks/>
        public void SetUserPasswordAsync(string organizationId, string accountName, string password, object userState)
        {
            if ((this.SetUserPasswordOperationCompleted == null))
            {
                this.SetUserPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserPasswordOperationCompleted);
            }
            this.InvokeAsync("SetUserPassword", new object[] {
                        organizationId,
                        accountName,
                        password}, this.SetUserPasswordOperationCompleted, userState);
        }

        private void OnSetUserPasswordOperationCompleted(object arg)
        {
            if ((this.SetUserPasswordCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserPasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetUserPrincipalName", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetUserPrincipalName(string organizationId, string accountName, string userPrincipalName)
        {
            this.Invoke("SetUserPrincipalName", new object[] {
                        organizationId,
                        accountName,
                        userPrincipalName});
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetUserPrincipalName(string organizationId, string accountName, string userPrincipalName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SetUserPrincipalName", new object[] {
                        organizationId,
                        accountName,
                        userPrincipalName}, callback, asyncState);
        }

        /// <remarks/>
        public void EndSetUserPrincipalName(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SetUserPrincipalNameAsync(string organizationId, string accountName, string userPrincipalName)
        {
            this.SetUserPrincipalNameAsync(organizationId, accountName, userPrincipalName, null);
        }

        /// <remarks/>
        public void SetUserPrincipalNameAsync(string organizationId, string accountName, string userPrincipalName, object userState)
        {
            if ((this.SetUserPrincipalNameOperationCompleted == null))
            {
                this.SetUserPrincipalNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserPrincipalNameOperationCompleted);
            }
            this.InvokeAsync("SetUserPrincipalName", new object[] {
                        organizationId,
                        accountName,
                        userPrincipalName}, this.SetUserPrincipalNameOperationCompleted, userState);
        }

        private void OnSetUserPrincipalNameOperationCompleted(object arg)
        {
            if ((this.SetUserPrincipalNameCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserPrincipalNameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteOrganizationDomain", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteOrganizationDomain(string organizationDistinguishedName, string domain)
        {
            this.Invoke("DeleteOrganizationDomain", new object[] {
                        organizationDistinguishedName,
                        domain});
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteOrganizationDomain(string organizationDistinguishedName, string domain, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteOrganizationDomain", new object[] {
                        organizationDistinguishedName,
                        domain}, callback, asyncState);
        }

        /// <remarks/>
        public void EndDeleteOrganizationDomain(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DeleteOrganizationDomainAsync(string organizationDistinguishedName, string domain)
        {
            this.DeleteOrganizationDomainAsync(organizationDistinguishedName, domain, null);
        }

        /// <remarks/>
        public void DeleteOrganizationDomainAsync(string organizationDistinguishedName, string domain, object userState)
        {
            if ((this.DeleteOrganizationDomainOperationCompleted == null))
            {
                this.DeleteOrganizationDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOrganizationDomainOperationCompleted);
            }
            this.InvokeAsync("DeleteOrganizationDomain", new object[] {
                        organizationDistinguishedName,
                        domain}, this.DeleteOrganizationDomainOperationCompleted, userState);
        }

        private void OnDeleteOrganizationDomainOperationCompleted(object arg)
        {
            if ((this.DeleteOrganizationDomainCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteOrganizationDomainCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateOrganizationDomain", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateOrganizationDomain(string organizationDistinguishedName, string domain)
        {
            this.Invoke("CreateOrganizationDomain", new object[] {
                        organizationDistinguishedName,
                        domain});
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateOrganizationDomain(string organizationDistinguishedName, string domain, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CreateOrganizationDomain", new object[] {
                        organizationDistinguishedName,
                        domain}, callback, asyncState);
        }

        /// <remarks/>
        public void EndCreateOrganizationDomain(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void CreateOrganizationDomainAsync(string organizationDistinguishedName, string domain)
        {
            this.CreateOrganizationDomainAsync(organizationDistinguishedName, domain, null);
        }

        /// <remarks/>
        public void CreateOrganizationDomainAsync(string organizationDistinguishedName, string domain, object userState)
        {
            if ((this.CreateOrganizationDomainOperationCompleted == null))
            {
                this.CreateOrganizationDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOrganizationDomainOperationCompleted);
            }
            this.InvokeAsync("CreateOrganizationDomain", new object[] {
                        organizationDistinguishedName,
                        domain}, this.CreateOrganizationDomainOperationCompleted, userState);
        }

        private void OnCreateOrganizationDomainOperationCompleted(object arg)
        {
            if ((this.CreateOrganizationDomainCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateOrganizationDomainCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPasswordPolicy", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PasswordPolicyResult GetPasswordPolicy()
        {
            object[] results = this.Invoke("GetPasswordPolicy", new object[0]);
            return ((PasswordPolicyResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetPasswordPolicy(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetPasswordPolicy", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public PasswordPolicyResult EndGetPasswordPolicy(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((PasswordPolicyResult)(results[0]));
        }

        /// <remarks/>
        public void GetPasswordPolicyAsync()
        {
            this.GetPasswordPolicyAsync(null);
        }

        /// <remarks/>
        public void GetPasswordPolicyAsync(object userState)
        {
            if ((this.GetPasswordPolicyOperationCompleted == null))
            {
                this.GetPasswordPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPasswordPolicyOperationCompleted);
            }
            this.InvokeAsync("GetPasswordPolicy", new object[0], this.GetPasswordPolicyOperationCompleted, userState);
        }

        private void OnGetPasswordPolicyOperationCompleted(object arg)
        {
            if ((this.GetPasswordPolicyCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPasswordPolicyCompleted(this, new GetPasswordPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSamAccountNameByUserPrincipalName", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSamAccountNameByUserPrincipalName(string organizationId, string userPrincipalName)
        {
            object[] results = this.Invoke("GetSamAccountNameByUserPrincipalName", new object[] {
                        organizationId,
                        userPrincipalName});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSamAccountNameByUserPrincipalName(string organizationId, string userPrincipalName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSamAccountNameByUserPrincipalName", new object[] {
                        organizationId,
                        userPrincipalName}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetSamAccountNameByUserPrincipalName(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetSamAccountNameByUserPrincipalNameAsync(string organizationId, string userPrincipalName)
        {
            this.GetSamAccountNameByUserPrincipalNameAsync(organizationId, userPrincipalName, null);
        }

        /// <remarks/>
        public void GetSamAccountNameByUserPrincipalNameAsync(string organizationId, string userPrincipalName, object userState)
        {
            if ((this.GetSamAccountNameByUserPrincipalNameOperationCompleted == null))
            {
                this.GetSamAccountNameByUserPrincipalNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSamAccountNameByUserPrincipalNameOperationCompleted);
            }
            this.InvokeAsync("GetSamAccountNameByUserPrincipalName", new object[] {
                        organizationId,
                        userPrincipalName}, this.GetSamAccountNameByUserPrincipalNameOperationCompleted, userState);
        }

        private void OnGetSamAccountNameByUserPrincipalNameOperationCompleted(object arg)
        {
            if ((this.GetSamAccountNameByUserPrincipalNameCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSamAccountNameByUserPrincipalNameCompleted(this, new GetSamAccountNameByUserPrincipalNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DoesSamAccountNameExist", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DoesSamAccountNameExist(string accountName)
        {
            object[] results = this.Invoke("DoesSamAccountNameExist", new object[] {
                        accountName});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDoesSamAccountNameExist(string accountName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DoesSamAccountNameExist", new object[] {
                        accountName}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndDoesSamAccountNameExist(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void DoesSamAccountNameExistAsync(string accountName)
        {
            this.DoesSamAccountNameExistAsync(accountName, null);
        }

        /// <remarks/>
        public void DoesSamAccountNameExistAsync(string accountName, object userState)
        {
            if ((this.DoesSamAccountNameExistOperationCompleted == null))
            {
                this.DoesSamAccountNameExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoesSamAccountNameExistOperationCompleted);
            }
            this.InvokeAsync("DoesSamAccountNameExist", new object[] {
                        accountName}, this.DoesSamAccountNameExistOperationCompleted, userState);
        }

        private void OnDoesSamAccountNameExistOperationCompleted(object arg)
        {
            if ((this.DoesSamAccountNameExistCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoesSamAccountNameExistCompleted(this, new DoesSamAccountNameExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void OrganizationExistsCompletedEventHandler(object sender, OrganizationExistsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OrganizationExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal OrganizationExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CreateOrganizationCompletedEventHandler(object sender, CreateOrganizationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateOrganizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateOrganizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Organization Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((Organization)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteOrganizationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CreateUserCompletedEventHandler(object sender, CreateUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetUserGeneralSettingsCompletedEventHandler(object sender, GetUserGeneralSettingsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserGeneralSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetUserGeneralSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public OrganizationUser Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((OrganizationUser)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CreateSecurityGroupCompletedEventHandler(object sender, CreateSecurityGroupCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateSecurityGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateSecurityGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSecurityGroupGeneralSettingsCompletedEventHandler(object sender, GetSecurityGroupGeneralSettingsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSecurityGroupGeneralSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSecurityGroupGeneralSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public OrganizationSecurityGroup Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((OrganizationSecurityGroup)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteSecurityGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetSecurityGroupGeneralSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AddObjectToSecurityGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteObjectFromSecurityGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetUserGeneralSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetUserPasswordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetUserPrincipalNameCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteOrganizationDomainCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CreateOrganizationDomainCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetPasswordPolicyCompletedEventHandler(object sender, GetPasswordPolicyCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPasswordPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPasswordPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public PasswordPolicyResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((PasswordPolicyResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSamAccountNameByUserPrincipalNameCompletedEventHandler(object sender, GetSamAccountNameByUserPrincipalNameCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSamAccountNameByUserPrincipalNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSamAccountNameByUserPrincipalNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DoesSamAccountNameExistCompletedEventHandler(object sender, DoesSamAccountNameExistCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoesSamAccountNameExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DoesSamAccountNameExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}
