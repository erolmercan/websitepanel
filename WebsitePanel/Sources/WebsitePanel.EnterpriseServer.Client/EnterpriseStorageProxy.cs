//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4984
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 

using WebsitePanel.EnterpriseServer.Base.HostedSolution;
using WebsitePanel.Providers;
using WebsitePanel.Providers.Common;
using WebsitePanel.Providers.HostedSolution;
using WebsitePanel.Providers.OS;

namespace WebsitePanel.EnterpriseServer
{
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "esEnterpriseStorageSoap", Namespace = "http://smbsaas/websitepanel/enterpriseserver")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceProviderItem))]
    public partial class esEnterpriseStorage : Microsoft.Web.Services3.WebServicesClientProtocol
    {

        private System.Threading.SendOrPostCallback CheckFileServicesInstallationOperationCompleted;

        private System.Threading.SendOrPostCallback GetEnterpriseFoldersOperationCompleted;

        private System.Threading.SendOrPostCallback GetEnterpriseFolderOperationCompleted;

        private System.Threading.SendOrPostCallback CreateEnterpriseFolderOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteEnterpriseFolderOperationCompleted;

        private System.Threading.SendOrPostCallback GetEnterpriseFolderPermissionsOperationCompleted;

        private System.Threading.SendOrPostCallback SetEnterpriseFolderPermissionsOperationCompleted;

        private System.Threading.SendOrPostCallback SearchESAccountsOperationCompleted;

        private System.Threading.SendOrPostCallback GetEnterpriseFoldersPagedOperationCompleted;

        /// <remarks/>
        public esEnterpriseStorage()
        {
            this.Url = "http://localhost:9002/esEnterpriseStorage.asmx";
        }

        /// <remarks/>
        public event CheckFileServicesInstallationCompletedEventHandler CheckFileServicesInstallationCompleted;

        /// <remarks/>
        public event GetEnterpriseFoldersCompletedEventHandler GetEnterpriseFoldersCompleted;

        /// <remarks/>
        public event GetEnterpriseFolderCompletedEventHandler GetEnterpriseFolderCompleted;

        /// <remarks/>
        public event CreateEnterpriseFolderCompletedEventHandler CreateEnterpriseFolderCompleted;

        /// <remarks/>
        public event DeleteEnterpriseFolderCompletedEventHandler DeleteEnterpriseFolderCompleted;

        /// <remarks/>
        public event GetEnterpriseFolderPermissionsCompletedEventHandler GetEnterpriseFolderPermissionsCompleted;

        /// <remarks/>
        public event SetEnterpriseFolderPermissionsCompletedEventHandler SetEnterpriseFolderPermissionsCompleted;

        /// <remarks/>
        public event SearchESAccountsCompletedEventHandler SearchESAccountsCompleted;

        /// <remarks/>
        public event GetEnterpriseFoldersPagedCompletedEventHandler GetEnterpriseFoldersPagedCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/CheckFileServicesInstallation", RequestNamespace = "http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace = "http://smbsaas/websitepanel/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckFileServicesInstallation(int serviceId)
        {
            object[] results = this.Invoke("CheckFileServicesInstallation", new object[] {
                        serviceId});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCheckFileServicesInstallation(int serviceId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CheckFileServicesInstallation", new object[] {
                        serviceId}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndCheckFileServicesInstallation(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void CheckFileServicesInstallationAsync(int serviceId)
        {
            this.CheckFileServicesInstallationAsync(serviceId, null);
        }

        /// <remarks/>
        public void CheckFileServicesInstallationAsync(int serviceId, object userState)
        {
            if ((this.CheckFileServicesInstallationOperationCompleted == null))
            {
                this.CheckFileServicesInstallationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckFileServicesInstallationOperationCompleted);
            }
            this.InvokeAsync("CheckFileServicesInstallation", new object[] {
                        serviceId}, this.CheckFileServicesInstallationOperationCompleted, userState);
        }

        private void OnCheckFileServicesInstallationOperationCompleted(object arg)
        {
            if ((this.CheckFileServicesInstallationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckFileServicesInstallationCompleted(this, new CheckFileServicesInstallationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetEnterpriseFolders", RequestNamespace = "http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace = "http://smbsaas/websitepanel/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SystemFile[] GetEnterpriseFolders(int itemId)
        {
            object[] results = this.Invoke("GetEnterpriseFolders", new object[] {
                        itemId});
            return ((SystemFile[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetEnterpriseFolders(int itemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetEnterpriseFolders", new object[] {
                        itemId}, callback, asyncState);
        }

        /// <remarks/>
        public SystemFile[] EndGetEnterpriseFolders(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SystemFile[])(results[0]));
        }

        /// <remarks/>
        public void GetEnterpriseFoldersAsync(int itemId)
        {
            this.GetEnterpriseFoldersAsync(itemId, null);
        }

        /// <remarks/>
        public void GetEnterpriseFoldersAsync(int itemId, object userState)
        {
            if ((this.GetEnterpriseFoldersOperationCompleted == null))
            {
                this.GetEnterpriseFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEnterpriseFoldersOperationCompleted);
            }
            this.InvokeAsync("GetEnterpriseFolders", new object[] {
                        itemId}, this.GetEnterpriseFoldersOperationCompleted, userState);
        }

        private void OnGetEnterpriseFoldersOperationCompleted(object arg)
        {
            if ((this.GetEnterpriseFoldersCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEnterpriseFoldersCompleted(this, new GetEnterpriseFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetEnterpriseFolder", RequestNamespace = "http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace = "http://smbsaas/websitepanel/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SystemFile GetEnterpriseFolder(int itemId, string folderName)
        {
            object[] results = this.Invoke("GetEnterpriseFolder", new object[] {
                        itemId,
                        folderName});
            return ((SystemFile)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetEnterpriseFolder(int itemId, string folderName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetEnterpriseFolder", new object[] {
                        itemId,
                        folderName}, callback, asyncState);
        }

        /// <remarks/>
        public SystemFile EndGetEnterpriseFolder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SystemFile)(results[0]));
        }

        /// <remarks/>
        public void GetEnterpriseFolderAsync(int itemId, string folderName)
        {
            this.GetEnterpriseFolderAsync(itemId, folderName, null);
        }

        /// <remarks/>
        public void GetEnterpriseFolderAsync(int itemId, string folderName, object userState)
        {
            if ((this.GetEnterpriseFolderOperationCompleted == null))
            {
                this.GetEnterpriseFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEnterpriseFolderOperationCompleted);
            }
            this.InvokeAsync("GetEnterpriseFolder", new object[] {
                        itemId,
                        folderName}, this.GetEnterpriseFolderOperationCompleted, userState);
        }

        private void OnGetEnterpriseFolderOperationCompleted(object arg)
        {
            if ((this.GetEnterpriseFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEnterpriseFolderCompleted(this, new GetEnterpriseFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/CreateEnterpriseFolder", RequestNamespace = "http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace = "http://smbsaas/websitepanel/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject CreateEnterpriseFolder(int itemId, string folderName)
        {
            object[] results = this.Invoke("CreateEnterpriseFolder", new object[] {
                        itemId,
                        folderName});
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateEnterpriseFolder(int itemId, string folderName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CreateEnterpriseFolder", new object[] {
                        itemId,
                        folderName}, callback, asyncState);
        }

        /// <remarks/>
        public ResultObject EndCreateEnterpriseFolder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public void CreateEnterpriseFolderAsync(int itemId, string folderName)
        {
            this.CreateEnterpriseFolderAsync(itemId, folderName, null);
        }

        /// <remarks/>
        public void CreateEnterpriseFolderAsync(int itemId, string folderName, object userState)
        {
            if ((this.CreateEnterpriseFolderOperationCompleted == null))
            {
                this.CreateEnterpriseFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateEnterpriseFolderOperationCompleted);
            }
            this.InvokeAsync("CreateEnterpriseFolder", new object[] {
                        itemId,
                        folderName}, this.CreateEnterpriseFolderOperationCompleted, userState);
        }

        private void OnCreateEnterpriseFolderOperationCompleted(object arg)
        {
            if ((this.CreateEnterpriseFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateEnterpriseFolderCompleted(this, new CreateEnterpriseFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/DeleteEnterpriseFolder", RequestNamespace = "http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace = "http://smbsaas/websitepanel/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject DeleteEnterpriseFolder(int itemId, string folderName)
        {
            object[] results = this.Invoke("DeleteEnterpriseFolder", new object[] {
                        itemId,
                        folderName});
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteEnterpriseFolder(int itemId, string folderName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteEnterpriseFolder", new object[] {
                        itemId,
                        folderName}, callback, asyncState);
        }

        /// <remarks/>
        public ResultObject EndDeleteEnterpriseFolder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public void DeleteEnterpriseFolderAsync(int itemId, string folderName)
        {
            this.DeleteEnterpriseFolderAsync(itemId, folderName, null);
        }

        /// <remarks/>
        public void DeleteEnterpriseFolderAsync(int itemId, string folderName, object userState)
        {
            if ((this.DeleteEnterpriseFolderOperationCompleted == null))
            {
                this.DeleteEnterpriseFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteEnterpriseFolderOperationCompleted);
            }
            this.InvokeAsync("DeleteEnterpriseFolder", new object[] {
                        itemId,
                        folderName}, this.DeleteEnterpriseFolderOperationCompleted, userState);
        }

        private void OnDeleteEnterpriseFolderOperationCompleted(object arg)
        {
            if ((this.DeleteEnterpriseFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteEnterpriseFolderCompleted(this, new DeleteEnterpriseFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetEnterpriseFolderPermissions", RequestNamespace = "http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace = "http://smbsaas/websitepanel/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ESPermission[] GetEnterpriseFolderPermissions(int itemId, string folderName)
        {
            object[] results = this.Invoke("GetEnterpriseFolderPermissions", new object[] {
                        itemId,
                        folderName});
            return ((ESPermission[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetEnterpriseFolderPermissions(int itemId, string folderName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetEnterpriseFolderPermissions", new object[] {
                        itemId,
                        folderName}, callback, asyncState);
        }

        /// <remarks/>
        public ESPermission[] EndGetEnterpriseFolderPermissions(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ESPermission[])(results[0]));
        }

        /// <remarks/>
        public void GetEnterpriseFolderPermissionsAsync(int itemId, string folderName)
        {
            this.GetEnterpriseFolderPermissionsAsync(itemId, folderName, null);
        }

        /// <remarks/>
        public void GetEnterpriseFolderPermissionsAsync(int itemId, string folderName, object userState)
        {
            if ((this.GetEnterpriseFolderPermissionsOperationCompleted == null))
            {
                this.GetEnterpriseFolderPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEnterpriseFolderPermissionsOperationCompleted);
            }
            this.InvokeAsync("GetEnterpriseFolderPermissions", new object[] {
                        itemId,
                        folderName}, this.GetEnterpriseFolderPermissionsOperationCompleted, userState);
        }

        private void OnGetEnterpriseFolderPermissionsOperationCompleted(object arg)
        {
            if ((this.GetEnterpriseFolderPermissionsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEnterpriseFolderPermissionsCompleted(this, new GetEnterpriseFolderPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/SetEnterpriseFolderPermissions", RequestNamespace = "http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace = "http://smbsaas/websitepanel/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject SetEnterpriseFolderPermissions(int itemId, string folderName, ESPermission[] permission)
        {
            object[] results = this.Invoke("SetEnterpriseFolderPermissions", new object[] {
                        itemId,
                        folderName,
                        permission});
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetEnterpriseFolderPermissions(int itemId, string folderName, ESPermission[] permission, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SetEnterpriseFolderPermissions", new object[] {
                        itemId,
                        folderName,
                        permission}, callback, asyncState);
        }

        /// <remarks/>
        public ResultObject EndSetEnterpriseFolderPermissions(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public void SetEnterpriseFolderPermissionsAsync(int itemId, string folderName, ESPermission[] permission)
        {
            this.SetEnterpriseFolderPermissionsAsync(itemId, folderName, permission, null);
        }

        /// <remarks/>
        public void SetEnterpriseFolderPermissionsAsync(int itemId, string folderName, ESPermission[] permission, object userState)
        {
            if ((this.SetEnterpriseFolderPermissionsOperationCompleted == null))
            {
                this.SetEnterpriseFolderPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEnterpriseFolderPermissionsOperationCompleted);
            }
            this.InvokeAsync("SetEnterpriseFolderPermissions", new object[] {
                        itemId,
                        folderName,
                        permission}, this.SetEnterpriseFolderPermissionsOperationCompleted, userState);
        }

        private void OnSetEnterpriseFolderPermissionsOperationCompleted(object arg)
        {
            if ((this.SetEnterpriseFolderPermissionsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEnterpriseFolderPermissionsCompleted(this, new SetEnterpriseFolderPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/SearchESAccounts", RequestNamespace = "http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace = "http://smbsaas/websitepanel/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExchangeAccount[] SearchESAccounts(int itemId, string filterColumn, string filterValue, string sortColumn)
        {
            object[] results = this.Invoke("SearchESAccounts", new object[] {
                        itemId,
                        filterColumn,
                        filterValue,
                        sortColumn});
            return ((ExchangeAccount[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSearchESAccounts(int itemId, string filterColumn, string filterValue, string sortColumn, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SearchESAccounts", new object[] {
                        itemId,
                        filterColumn,
                        filterValue,
                        sortColumn}, callback, asyncState);
        }

        /// <remarks/>
        public ExchangeAccount[] EndSearchESAccounts(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExchangeAccount[])(results[0]));
        }

        /// <remarks/>
        public void SearchESAccountsAsync(int itemId, string filterColumn, string filterValue, string sortColumn)
        {
            this.SearchESAccountsAsync(itemId, filterColumn, filterValue, sortColumn, null);
        }

        /// <remarks/>
        public void SearchESAccountsAsync(int itemId, string filterColumn, string filterValue, string sortColumn, object userState)
        {
            if ((this.SearchESAccountsOperationCompleted == null))
            {
                this.SearchESAccountsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchESAccountsOperationCompleted);
            }
            this.InvokeAsync("SearchESAccounts", new object[] {
                        itemId,
                        filterColumn,
                        filterValue,
                        sortColumn}, this.SearchESAccountsOperationCompleted, userState);
        }

        private void OnSearchESAccountsOperationCompleted(object arg)
        {
            if ((this.SearchESAccountsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchESAccountsCompleted(this, new SearchESAccountsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetEnterpriseFoldersPaged", RequestNamespace = "http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace = "http://smbsaas/websitepanel/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SystemFilesPaged GetEnterpriseFoldersPaged(int itemId, string filterValue, string sortColumn, int startRow, int maximumRows)
        {
            object[] results = this.Invoke("GetEnterpriseFoldersPaged", new object[] {
                        itemId,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows});
            return ((SystemFilesPaged)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetEnterpriseFoldersPaged(int itemId, string filterValue, string sortColumn, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetEnterpriseFoldersPaged", new object[] {
                        itemId,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, callback, asyncState);
        }

        /// <remarks/>
        public SystemFilesPaged EndGetEnterpriseFoldersPaged(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SystemFilesPaged)(results[0]));
        }

        /// <remarks/>
        public void GetEnterpriseFoldersPagedAsync(int itemId, string filterValue, string sortColumn, int startRow, int maximumRows)
        {
            this.GetEnterpriseFoldersPagedAsync(itemId, filterValue, sortColumn, startRow, maximumRows, null);
        }

        /// <remarks/>
        public void GetEnterpriseFoldersPagedAsync(int itemId, string filterValue, string sortColumn, int startRow, int maximumRows, object userState)
        {
            if ((this.GetEnterpriseFoldersPagedOperationCompleted == null))
            {
                this.GetEnterpriseFoldersPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEnterpriseFoldersPagedOperationCompleted);
            }
            this.InvokeAsync("GetEnterpriseFoldersPaged", new object[] {
                        itemId,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, this.GetEnterpriseFoldersPagedOperationCompleted, userState);
        }

        private void OnGetEnterpriseFoldersPagedOperationCompleted(object arg)
        {
            if ((this.GetEnterpriseFoldersPagedCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEnterpriseFoldersPagedCompleted(this, new GetEnterpriseFoldersPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CheckFileServicesInstallationCompletedEventHandler(object sender, CheckFileServicesInstallationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckFileServicesInstallationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckFileServicesInstallationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetEnterpriseFoldersCompletedEventHandler(object sender, GetEnterpriseFoldersCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEnterpriseFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetEnterpriseFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SystemFile[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SystemFile[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetEnterpriseFolderCompletedEventHandler(object sender, GetEnterpriseFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEnterpriseFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetEnterpriseFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SystemFile Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SystemFile)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateEnterpriseFolderCompletedEventHandler(object sender, CreateEnterpriseFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateEnterpriseFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateEnterpriseFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteEnterpriseFolderCompletedEventHandler(object sender, DeleteEnterpriseFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteEnterpriseFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteEnterpriseFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetEnterpriseFolderPermissionsCompletedEventHandler(object sender, GetEnterpriseFolderPermissionsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEnterpriseFolderPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetEnterpriseFolderPermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ESPermission[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ESPermission[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetEnterpriseFolderPermissionsCompletedEventHandler(object sender, SetEnterpriseFolderPermissionsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetEnterpriseFolderPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SetEnterpriseFolderPermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SearchESAccountsCompletedEventHandler(object sender, SearchESAccountsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchESAccountsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SearchESAccountsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ExchangeAccount[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ExchangeAccount[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetEnterpriseFoldersPagedCompletedEventHandler(object sender, GetEnterpriseFoldersPagedCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEnterpriseFoldersPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetEnterpriseFoldersPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SystemFilesPaged Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SystemFilesPaged)(this.results[0]));
            }
        }
    }
}
