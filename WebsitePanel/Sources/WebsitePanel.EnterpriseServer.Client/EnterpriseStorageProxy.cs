// Copyright (c) 2012, Outercurve Foundation.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// - Redistributions of source code must  retain  the  above copyright notice, this
//   list of conditions and the following disclaimer.
//
// - Redistributions in binary form  must  reproduce the  above  copyright  notice,
//   this list of conditions  and  the  following  disclaimer in  the documentation
//   and/or other materials provided with the distribution.
//
// - Neither  the  name  of  the  Outercurve Foundation  nor   the   names  of  its
//   contributors may be used to endorse or  promote  products  derived  from  this
//   software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT  NOT  LIMITED TO, THE IMPLIED
// WARRANTIES  OF  MERCHANTABILITY   AND  FITNESS  FOR  A  PARTICULAR  PURPOSE  ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
// ANY DIRECT, INDIRECT, INCIDENTAL,  SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT  OF  SUBSTITUTE  GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER  CAUSED AND ON
// ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT  LIABILITY,  OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING  IN  ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.6407
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.3038.
// 
using WebsitePanel.Providers;
using WebsitePanel.Providers.Common;
using WebsitePanel.Providers.ResultObjects;
using WebsitePanel.Providers.OS;


namespace WebsitePanel.EnterpriseServer {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="esEnterpriseStorageSoap", Namespace="http://smbsaas/websitepanel/enterpriseserver")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceProviderItem))]
    public partial class esEnterpriseStorage : Microsoft.Web.Services3.WebServicesClientProtocol {
        
        private System.Threading.SendOrPostCallback CheckFileServicesInstallationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEnterpriseFoldersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEnterpriseFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateEnterpriseFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteEnterpriseFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEnterpriseFolderQuotaOperationCompleted;
        
        /// <remarks/>
        public esEnterpriseStorage() {
            this.Url = "http://localhost:9002/esEnterpriseStorage.asmx";
        }
        
        /// <remarks/>
        public event CheckFileServicesInstallationCompletedEventHandler CheckFileServicesInstallationCompleted;
        
        /// <remarks/>
        public event GetEnterpriseFoldersCompletedEventHandler GetEnterpriseFoldersCompleted;
        
        /// <remarks/>
        public event GetEnterpriseFolderCompletedEventHandler GetEnterpriseFolderCompleted;
        
        /// <remarks/>
        public event CreateEnterpriseFolderCompletedEventHandler CreateEnterpriseFolderCompleted;
        
        /// <remarks/>
        public event DeleteEnterpriseFolderCompletedEventHandler DeleteEnterpriseFolderCompleted;
        
        /// <remarks/>
        public event SetEnterpriseFolderQuotaCompletedEventHandler SetEnterpriseFolderQuotaCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/CheckFileServicesInstallation", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckFileServicesInstallation(int serviceId) {
            object[] results = this.Invoke("CheckFileServicesInstallation", new object[] {
                        serviceId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckFileServicesInstallation(int serviceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckFileServicesInstallation", new object[] {
                        serviceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckFileServicesInstallation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckFileServicesInstallationAsync(int serviceId) {
            this.CheckFileServicesInstallationAsync(serviceId, null);
        }
        
        /// <remarks/>
        public void CheckFileServicesInstallationAsync(int serviceId, object userState) {
            if ((this.CheckFileServicesInstallationOperationCompleted == null)) {
                this.CheckFileServicesInstallationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckFileServicesInstallationOperationCompleted);
            }
            this.InvokeAsync("CheckFileServicesInstallation", new object[] {
                        serviceId}, this.CheckFileServicesInstallationOperationCompleted, userState);
        }
        
        private void OnCheckFileServicesInstallationOperationCompleted(object arg) {
            if ((this.CheckFileServicesInstallationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckFileServicesInstallationCompleted(this, new CheckFileServicesInstallationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetEnterpriseFolders", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SystemFile[] GetEnterpriseFolders(int itemId) {
            object[] results = this.Invoke("GetEnterpriseFolders", new object[] {
                        itemId});
            return ((SystemFile[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEnterpriseFolders(int itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEnterpriseFolders", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public SystemFile[] EndGetEnterpriseFolders(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SystemFile[])(results[0]));
        }
        
        /// <remarks/>
        public void GetEnterpriseFoldersAsync(int itemId) {
            this.GetEnterpriseFoldersAsync(itemId, null);
        }
        
        /// <remarks/>
        public void GetEnterpriseFoldersAsync(int itemId, object userState) {
            if ((this.GetEnterpriseFoldersOperationCompleted == null)) {
                this.GetEnterpriseFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEnterpriseFoldersOperationCompleted);
            }
            this.InvokeAsync("GetEnterpriseFolders", new object[] {
                        itemId}, this.GetEnterpriseFoldersOperationCompleted, userState);
        }
        
        private void OnGetEnterpriseFoldersOperationCompleted(object arg) {
            if ((this.GetEnterpriseFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEnterpriseFoldersCompleted(this, new GetEnterpriseFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetEnterpriseFolder", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SystemFile GetEnterpriseFolder(int itemId, string folderName) {
            object[] results = this.Invoke("GetEnterpriseFolder", new object[] {
                        itemId,
                        folderName});
            return ((SystemFile)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEnterpriseFolder(int itemId, string folderName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEnterpriseFolder", new object[] {
                        itemId,
                        folderName}, callback, asyncState);
        }
        
        /// <remarks/>
        public SystemFile EndGetEnterpriseFolder(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SystemFile)(results[0]));
        }
        
        /// <remarks/>
        public void GetEnterpriseFolderAsync(int itemId, string folderName) {
            this.GetEnterpriseFolderAsync(itemId, folderName, null);
        }
        
        /// <remarks/>
        public void GetEnterpriseFolderAsync(int itemId, string folderName, object userState) {
            if ((this.GetEnterpriseFolderOperationCompleted == null)) {
                this.GetEnterpriseFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEnterpriseFolderOperationCompleted);
            }
            this.InvokeAsync("GetEnterpriseFolder", new object[] {
                        itemId,
                        folderName}, this.GetEnterpriseFolderOperationCompleted, userState);
        }
        
        private void OnGetEnterpriseFolderOperationCompleted(object arg) {
            if ((this.GetEnterpriseFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEnterpriseFolderCompleted(this, new GetEnterpriseFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/CreateEnterpriseFolder", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject CreateEnterpriseFolder(int itemId, string folderName, long quota) {
            object[] results = this.Invoke("CreateEnterpriseFolder", new object[] {
                        itemId,
                        folderName,
                        quota});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateEnterpriseFolder(int itemId, string folderName, long quota, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateEnterpriseFolder", new object[] {
                        itemId,
                        folderName,
                        quota}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndCreateEnterpriseFolder(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void CreateEnterpriseFolderAsync(int itemId, string folderName, long quota) {
            this.CreateEnterpriseFolderAsync(itemId, folderName, quota, null);
        }
        
        /// <remarks/>
        public void CreateEnterpriseFolderAsync(int itemId, string folderName, long quota, object userState) {
            if ((this.CreateEnterpriseFolderOperationCompleted == null)) {
                this.CreateEnterpriseFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateEnterpriseFolderOperationCompleted);
            }
            this.InvokeAsync("CreateEnterpriseFolder", new object[] {
                        itemId,
                        folderName,
                        quota}, this.CreateEnterpriseFolderOperationCompleted, userState);
        }
        
        private void OnCreateEnterpriseFolderOperationCompleted(object arg) {
            if ((this.CreateEnterpriseFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateEnterpriseFolderCompleted(this, new CreateEnterpriseFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/DeleteEnterpriseFolder", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject DeleteEnterpriseFolder(int itemId, string folderName) {
            object[] results = this.Invoke("DeleteEnterpriseFolder", new object[] {
                        itemId,
                        folderName});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteEnterpriseFolder(int itemId, string folderName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteEnterpriseFolder", new object[] {
                        itemId,
                        folderName}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndDeleteEnterpriseFolder(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteEnterpriseFolderAsync(int itemId, string folderName) {
            this.DeleteEnterpriseFolderAsync(itemId, folderName, null);
        }
        
        /// <remarks/>
        public void DeleteEnterpriseFolderAsync(int itemId, string folderName, object userState) {
            if ((this.DeleteEnterpriseFolderOperationCompleted == null)) {
                this.DeleteEnterpriseFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteEnterpriseFolderOperationCompleted);
            }
            this.InvokeAsync("DeleteEnterpriseFolder", new object[] {
                        itemId,
                        folderName}, this.DeleteEnterpriseFolderOperationCompleted, userState);
        }
        
        private void OnDeleteEnterpriseFolderOperationCompleted(object arg) {
            if ((this.DeleteEnterpriseFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteEnterpriseFolderCompleted(this, new DeleteEnterpriseFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/SetEnterpriseFolderQuota", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject SetEnterpriseFolderQuota(int itemId, string folderName, long quota) {
            object[] results = this.Invoke("SetEnterpriseFolderQuota", new object[] {
                        itemId,
                        folderName,
                        quota});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetEnterpriseFolderQuota(int itemId, string folderName, long quota, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetEnterpriseFolderQuota", new object[] {
                        itemId,
                        folderName,
                        quota}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndSetEnterpriseFolderQuota(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void SetEnterpriseFolderQuotaAsync(int itemId, string folderName, long quota) {
            this.SetEnterpriseFolderQuotaAsync(itemId, folderName, quota, null);
        }
        
        /// <remarks/>
        public void SetEnterpriseFolderQuotaAsync(int itemId, string folderName, long quota, object userState) {
            if ((this.SetEnterpriseFolderQuotaOperationCompleted == null)) {
                this.SetEnterpriseFolderQuotaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEnterpriseFolderQuotaOperationCompleted);
            }
            this.InvokeAsync("SetEnterpriseFolderQuota", new object[] {
                        itemId,
                        folderName,
                        quota}, this.SetEnterpriseFolderQuotaOperationCompleted, userState);
        }
        
        private void OnSetEnterpriseFolderQuotaOperationCompleted(object arg) {
            if ((this.SetEnterpriseFolderQuotaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEnterpriseFolderQuotaCompleted(this, new SetEnterpriseFolderQuotaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CheckFileServicesInstallationCompletedEventHandler(object sender, CheckFileServicesInstallationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckFileServicesInstallationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckFileServicesInstallationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetEnterpriseFoldersCompletedEventHandler(object sender, GetEnterpriseFoldersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEnterpriseFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEnterpriseFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SystemFile[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SystemFile[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetEnterpriseFolderCompletedEventHandler(object sender, GetEnterpriseFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEnterpriseFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEnterpriseFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SystemFile Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SystemFile)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CreateEnterpriseFolderCompletedEventHandler(object sender, CreateEnterpriseFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateEnterpriseFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateEnterpriseFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteEnterpriseFolderCompletedEventHandler(object sender, DeleteEnterpriseFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteEnterpriseFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteEnterpriseFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetEnterpriseFolderQuotaCompletedEventHandler(object sender, SetEnterpriseFolderQuotaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetEnterpriseFolderQuotaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetEnterpriseFolderQuotaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
}
