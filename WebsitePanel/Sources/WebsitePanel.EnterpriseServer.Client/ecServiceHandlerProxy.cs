// Copyright (c) 2014, Outercurve Foundation.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// - Redistributions of source code must  retain  the  above copyright notice, this
//   list of conditions and the following disclaimer.
//
// - Redistributions in binary form  must  reproduce the  above  copyright  notice,
//   this list of conditions  and  the  following  disclaimer in  the documentation
//   and/or other materials provided with the distribution.
//
// - Neither  the  name  of  the  Outercurve Foundation  nor   the   names  of  its
//   contributors may be used to endorse or  promote  products  derived  from  this
//   software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT  NOT  LIMITED TO, THE IMPLIED
// WARRANTIES  OF  MERCHANTABILITY   AND  FITNESS  FOR  A  PARTICULAR  PURPOSE  ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
// ANY DIRECT, INDIRECT, INCIDENTAL,  SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT  OF  SUBSTITUTE  GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER  CAUSED AND ON
// ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT  LIABILITY,  OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING  IN  ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.312
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace WebsitePanel.Ecommerce.EnterpriseServer {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ecServiceHandlerSoap", Namespace="http://tempuri.org/")]
    public partial class ecServiceHandler : Microsoft.Web.Services3.WebServicesClientProtocol {
        
        private System.Threading.SendOrPostCallback AddServiceHandlerTextResponseOperationCompleted;
        
        /// <remarks/>
        public ecServiceHandler() {
            this.Url = "http://localhost/EnterpriseServer/ecServiceHandler.asmx";
        }
        
        /// <remarks/>
        public event AddServiceHandlerTextResponseCompletedEventHandler AddServiceHandlerTextResponseCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddServiceHandlerTextResponse", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddServiceHandlerTextResponse(string serviceId, string contractId, int invoiceId, string dataReceived) {
            this.Invoke("AddServiceHandlerTextResponse", new object[] {
                        serviceId,
                        contractId,
                        invoiceId,
                        dataReceived});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddServiceHandlerTextResponse(string serviceId, string contractId, int invoiceId, string dataReceived, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddServiceHandlerTextResponse", new object[] {
                        serviceId,
                        contractId,
                        invoiceId,
                        dataReceived}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddServiceHandlerTextResponse(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AddServiceHandlerTextResponseAsync(string serviceId, string contractId, int invoiceId, string dataReceived) {
            this.AddServiceHandlerTextResponseAsync(serviceId, contractId, invoiceId, dataReceived, null);
        }
        
        /// <remarks/>
        public void AddServiceHandlerTextResponseAsync(string serviceId, string contractId, int invoiceId, string dataReceived, object userState) {
            if ((this.AddServiceHandlerTextResponseOperationCompleted == null)) {
                this.AddServiceHandlerTextResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddServiceHandlerTextResponseOperationCompleted);
            }
            this.InvokeAsync("AddServiceHandlerTextResponse", new object[] {
                        serviceId,
                        contractId,
                        invoiceId,
                        dataReceived}, this.AddServiceHandlerTextResponseOperationCompleted, userState);
        }
        
        private void OnAddServiceHandlerTextResponseOperationCompleted(object arg) {
            if ((this.AddServiceHandlerTextResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddServiceHandlerTextResponseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddServiceHandlerTextResponseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
